package com.example.realestate.repository;import android.app.Application;import android.os.AsyncTask;import androidx.lifecycle.LiveData;import com.example.realestate.model.dao.ImageDao;import com.example.realestate.model.database.RealEstateDateBase;import com.example.realestate.model.entity.Image;import java.util.List;public class ImageRepository {    private ImageDao imageDao;    public ImageRepository(Application application) {        imageDao = RealEstateDateBase.getDatabase( application ).getImageDao();    }    public void insert(Image image) {        new InsertTask( imageDao ).execute( image );    }    public void insert(List<Image> images) {        new InsertManyTask( imageDao ).execute( images );    }    public void delete(Image image) {        new DeleteTask( imageDao ).execute( image );    }    public void update(Image image) {        new UpdateTask( imageDao ).execute( image );    }    public LiveData<List<Image>> getByEstateID(int estateID) {        return imageDao.getByEstateID( estateID );    }    private static class InsertManyTask extends AsyncTask<List<Image>, Void, Void> {        private ImageDao imageDao;        public InsertManyTask(ImageDao imageDao) {            this.imageDao = imageDao;        }        @Override        protected Void doInBackground(List<Image>... imagesList) {            List<Image> images = imagesList[0];            for (Image image : images) {                imageDao.insert( image );            }            return null;        }    }    private static class InsertTask extends AsyncTask<Image, Void, Void> {        private ImageDao imageDao;        public InsertTask(ImageDao imageDao) {            this.imageDao = imageDao;        }        @Override        protected Void doInBackground(Image... images) {            imageDao.insert( images[0] );            return null;        }    }    private static class DeleteTask extends AsyncTask<Image, Void, Void> {        private ImageDao imageDao;        public DeleteTask(ImageDao imageDao) {            this.imageDao = imageDao;        }        @Override        protected Void doInBackground(Image... images) {            imageDao.delete( images[0] );            return null;        }    }    private static class UpdateTask extends AsyncTask<Image, Void, Void> {        private ImageDao imageDao;        public UpdateTask(ImageDao imageDao) {            this.imageDao = imageDao;        }        @Override        protected Void doInBackground(Image... images) {            imageDao.update( images[0] );            return null;        }    }}