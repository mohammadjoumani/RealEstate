package com.example.realestate.repository;import android.app.Application;import android.os.AsyncTask;import androidx.lifecycle.LiveData;import com.example.realestate.model.dao.OprationDao;import com.example.realestate.model.database.RealEstateDateBase;import com.example.realestate.model.entity.Opration;import java.util.List;public class OprationRepository {    private OprationDao oprationDao;    public OprationRepository(Application application) {        oprationDao = RealEstateDateBase.getDatabase( application ).getOprationDao();    }    public void insert(Opration opration) {        new InsertTask( oprationDao ).execute( opration );    }    public void delete(Opration opration) {        new DeleteTask( oprationDao ).execute( opration );    }    public void update(Opration opration) {        new UpdateTask( oprationDao ).execute( opration );    }    public LiveData<List<Opration>> getAllOpration() {        return oprationDao.getAllOpration();    }    private static class InsertTask extends AsyncTask<Opration, Void, Void> {        private OprationDao oprationDao;        public InsertTask(OprationDao oprationDao) {            this.oprationDao = oprationDao;        }        @Override        protected Void doInBackground(Opration... oprations) {            oprationDao.insert( oprations[0] );            return null;        }    }    private static class DeleteTask extends AsyncTask<Opration, Void, Void> {        private OprationDao oprationDao;        public DeleteTask(OprationDao oprationDao) {            this.oprationDao = oprationDao;        }        @Override        protected Void doInBackground(Opration... oprations) {            oprationDao.delete( oprations[0] );            return null;        }    }    private static class UpdateTask extends AsyncTask<Opration, Void, Void> {        private OprationDao oprationDao;        public UpdateTask(OprationDao oprationDao) {            this.oprationDao = oprationDao;        }        @Override        protected Void doInBackground(Opration... oprations) {            oprationDao.update( oprations[0] );            return null;        }    }}