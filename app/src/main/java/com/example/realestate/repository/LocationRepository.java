package com.example.realestate.repository;import android.app.Application;import android.os.AsyncTask;import androidx.lifecycle.LiveData;import com.example.realestate.model.dao.LocationDao;import com.example.realestate.model.database.RealEstateDateBase;import com.example.realestate.model.entity.Location;import java.util.List;public class LocationRepository {    private LocationDao locationDao;    public LocationRepository(Application application) {        locationDao = RealEstateDateBase.getDatabase( application ).getLocationDao();    }    public void insert(Location location) {        new InsertTask( locationDao ).execute( location );    }    public void delete(Location location) {        new DeletetTask( locationDao ).execute( location );    }    public void update(Location location) {        new UpdatetTask( locationDao ).execute( location );    }    public LiveData<List<Location>> getAllLocation() {        return locationDao.getAllLocation();    }    private static class InsertTask extends AsyncTask<Location, Void, Void> {        private LocationDao locationDao;        public InsertTask(LocationDao locationDao) {            this.locationDao = locationDao;        }        @Override        protected Void doInBackground(Location... locations) {            locationDao.insert( locations[0] );            return null;        }    }    private static class DeletetTask extends AsyncTask<Location, Void, Void> {        private LocationDao locationDao;        public DeletetTask(LocationDao locationDao) {            this.locationDao = locationDao;        }        @Override        protected Void doInBackground(Location... locations) {            locationDao.delete( locations[0] );            return null;        }    }    private static class UpdatetTask extends AsyncTask<Location, Void, Void> {        private LocationDao locationDao;        public UpdatetTask(LocationDao locationDao) {            this.locationDao = locationDao;        }        @Override        protected Void doInBackground(Location... locations) {            locationDao.update( locations[0] );            return null;        }    }}