package com.example.realestate.view.dialog;import android.Manifest;import android.content.ClipData;import android.content.Intent;import android.content.pm.PackageManager;import android.net.Uri;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.view.animation.AnimationUtils;import android.widget.EditText;import android.widget.ImageView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.fragment.app.DialogFragment;import com.example.realestate.R;import com.example.realestate.model.entity.Estate;import com.example.realestate.model.entity.Location;import com.example.realestate.model.entity.Office;import com.example.realestate.view.activity.HomeActivity;import com.google.android.material.bottomsheet.BottomSheetDialogFragment;import org.angmarch.views.NiceSpinner;import org.angmarch.views.OnSpinnerItemSelectedListener;import java.util.ArrayList;import java.util.List;import br.com.simplepass.loadingbutton.customViews.CircularProgressButton;import io.paperdb.Paper;import static android.app.Activity.RESULT_OK;public class EstateBottomSheet extends BottomSheetDialogFragment {    public static final int REQUEST_PERMISSION_EXTERNAL = 20;    private static final int REQUEST_CODE_GALLERY = 100;    private NiceSpinner spinnerBootomSheetEstate;    private EditText edtBottomSheetEstateSpace;    private EditText edtBottomSheetEstatePrice;    private CircularProgressButton btnBottomSheetEstateSave;    private ImageView btnBottomSheetEstateGallary;    private List<Location> locationss;    private List<String> nameLocation;    private String opration;    private int locationID = 1;    private Office office;    private int lastIDTypeEstate;    private Estate currentEstate=null;    private List<Uri> images;    public EstateBottomSheet(Estate estate,int lastIDTypeEstate) {        this.currentEstate=estate;        this.lastIDTypeEstate = lastIDTypeEstate;    }    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate( savedInstanceState );        setStyle( DialogFragment.STYLE_NORMAL, R.style.DialogStyle);    }    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater,                             @Nullable ViewGroup container,                             @Nullable Bundle savedInstanceState) {        View view = inflater.inflate( R.layout.bottom_sheet_estate, container );        //set to adjust screen height automatically, when soft keyboard appears on screen        getDialog().getWindow().setSoftInputMode( WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);        locationss = new ArrayList<>();        nameLocation = new ArrayList<>();        images = new ArrayList<>();        office = new Office();        btnBottomSheetEstateGallary = view.findViewById( R.id.btnBottomSheetEstateGallary );        edtBottomSheetEstateSpace = view.findViewById( R.id.edtBottomSheetEstateSpace );        edtBottomSheetEstatePrice = view.findViewById( R.id.edtBottomSheetEstatePrice );        btnBottomSheetEstateSave = view.findViewById( R.id.btnBottomSheetEstateSave );        spinnerBootomSheetEstate = view.findViewById( R.id.spinnerBootomSheetEstate );        ((HomeActivity) getActivity()).getAllLocation();        locationss = ((HomeActivity) getActivity()).getLocations();        for (int i = 0; i < locationss.size(); i++) {            nameLocation.add( locationss.get( i ).getName() );        }        spinnerBootomSheetEstate.attachDataSource( nameLocation );        spinnerBootomSheetEstate.setOnSpinnerItemSelectedListener( new OnSpinnerItemSelectedListener() {            @Override            public void onItemSelected(NiceSpinner parent, View view, int position, long id) {                locationID = position + 1;                String item = (String) parent.getItemAtPosition( position );            }        } );        btnBottomSheetEstateGallary.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View view) {                view.startAnimation( AnimationUtils.loadAnimation( getActivity(), R.anim.scale_animation ) );                if (checkPermissionsExternal()) {                    openGallery();                } else {                    requestRuntimePermissionsExternal();                }            }        } );        if(currentEstate!=null){            Log.d("mohammad",currentEstate.getId()+"");            edtBottomSheetEstateSpace.setText( currentEstate.getSpace()+"" );            edtBottomSheetEstatePrice.setText( currentEstate.getPrice()+"" );            spinnerBootomSheetEstate.setSelectedIndex( currentEstate.getLocationID()-1 );        }        btnBottomSheetEstateSave.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View view) {                String space = edtBottomSheetEstateSpace.getText().toString().trim();                String price = edtBottomSheetEstatePrice.getText().toString().trim();                if (space.equals( "" )) {                    edtBottomSheetEstateSpace.setError( "Faild can't be Empty" );                    return;                }                if (price.equals( "" )) {                    edtBottomSheetEstatePrice.setError( "Faild can't be Empty" );                    return;                }                if (images.size() == 0) {                    Toast.makeText( getActivity(), "Please Select Image For Estate", Toast.LENGTH_SHORT ).show();                    return;                }                opration = ((HomeActivity) getActivity()).getOpration();                office = Paper.book().read( "office" );                if(currentEstate==null){                    ((HomeActivity) getActivity()).estateinsert( new Estate( 0, opration, lastIDTypeEstate,                            locationID, office.getId(), Integer.parseInt( price ), Integer.parseInt( space ), images.get( 0 ).toString() ) );                    //((TestActivity) getActivity()).getEstateID( images );                }                else {                    currentEstate.setId( currentEstate.getId() );                    currentEstate.setOprationName(opration);                    currentEstate.setTypeEstateID( lastIDTypeEstate );                    currentEstate.setLocationID( locationID );                    currentEstate.setOfficeID(office.getId());                    currentEstate.setPrice( Integer.parseInt( price) );                    currentEstate.setSpace( Integer.parseInt( space ) );                    currentEstate.setImage(images.get( 0 ).toString());                    ((HomeActivity) getActivity()).estateupdate( currentEstate );                }                dismiss();            }        } );        return view;    }    public boolean checkPermissionsExternal() {        if (ContextCompat.checkSelfPermission( getActivity(), Manifest.permission.READ_EXTERNAL_STORAGE ) == PackageManager.PERMISSION_DENIED ||                ContextCompat.checkSelfPermission( getActivity(), Manifest.permission.WRITE_EXTERNAL_STORAGE ) == PackageManager.PERMISSION_DENIED) {            return false;        }        return true;    }    public void openGallery() {        Intent intent = new Intent();        intent.setType( "image/*" );        intent.setAction( Intent.ACTION_GET_CONTENT );        intent.putExtra( Intent.EXTRA_ALLOW_MULTIPLE, true );        startActivityForResult( intent, REQUEST_CODE_GALLERY );    }    private void requestRuntimePermissionsExternal() {        ActivityCompat.requestPermissions( getActivity(),                new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE},                REQUEST_PERMISSION_EXTERNAL );    }    @Override    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult( requestCode, resultCode, data );        if (resultCode == RESULT_OK) {            switch (requestCode) {                case REQUEST_CODE_GALLERY:                    if (data.getClipData() != null) {                        ClipData mClipData = data.getClipData();                        for (int i = 0; i < mClipData.getItemCount(); i++) {                            ClipData.Item item = mClipData.getItemAt( i );                            images.add( item.getUri() );                        }                    } else if (data.getData() != null) {                        Uri uri = data.getData();                        images.add( uri );                    }                    break;            }        }    }}