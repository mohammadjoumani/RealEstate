package com.example.realestate.view.fragment;import android.app.AlertDialog;import android.content.DialogInterface;import android.graphics.Canvas;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.view.animation.LayoutAnimationController;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.core.content.ContextCompat;import androidx.fragment.app.Fragment;import androidx.lifecycle.Observer;import androidx.lifecycle.ViewModelProviders;import androidx.recyclerview.widget.ItemTouchHelper;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;import com.example.realestate.R;import com.example.realestate.model.entity.Estate;import com.example.realestate.model.entity.EstateInfo;import com.example.realestate.model.entity.Image;import com.example.realestate.model.entity.TypeEstate;import com.example.realestate.view.activity.TestActivity;import com.example.realestate.view.adapter.EstateRcyclerAdapter;import com.example.realestate.view.adapter.TypeEstateRecyclerAdapter;import com.example.realestate.view.dialog.EstateBottomSheet;import com.example.realestate.view.dialog.TypeEstateBottomSheet;import com.example.realestate.viewmodel.EstateViewModel;import com.example.realestate.viewmodel.ImageViewModel;import com.example.realestate.viewmodel.TypeEstateViewModel;import com.facebook.shimmer.ShimmerFrameLayout;import com.google.android.material.floatingactionbutton.FloatingActionButton;import java.util.ArrayList;import java.util.List;import it.xabaras.android.recyclerview.swipedecorator.RecyclerViewSwipeDecorator;public class HomeFragment extends Fragment {    private int lastTypeEstate = 1;    private LayoutAnimationController layoutAnimationController;    private Animation scaleAnimation;    private ImageButton btnFragBackToOpartion;    private ImageView imgFragHomeProfile;    private TextView txtFragHomeNameOpration;    private ImageView imgFragAddTypeEstate;    private RecyclerView recyclerFragHomeTypeEstate;    private List<TypeEstate> typeEstateList;    private TypeEstateRecyclerAdapter typeEstateRecyclerAdapter;    private RecyclerView.LayoutManager layoutManagerTypeEstate;    private TypeEstateViewModel typeEstateViewModel;    private ShimmerFrameLayout shimmerAnimationFragTypeEstate;    private FloatingActionButton floatingActionButtonFrag;    private RecyclerView recyclerFragHomeEstate;    private List<EstateInfo> estateInfos;    private List<Estate> estateAll;    private EstateRcyclerAdapter estateRcyclerAdapter;    private RecyclerView.LayoutManager layoutManagerEstate;    private EstateViewModel estateViewModel;    private ShimmerFrameLayout shimmerAnimationFragEstate;    private SwipeRefreshLayout swipeRefreshFragHomeEstateRecycler;    private EstateBottomSheet estateBottomSheet;    private int maxEstateID;    private String opration;    private ImageView imgFragHomeEmptyData;    private ImageViewModel imageViewModel;    private List<Image> imagess;    public View onCreateView(@NonNull LayoutInflater inflater,                             ViewGroup container, Bundle savedInstanceState) {        View view = inflater.inflate( R.layout.fragment_home, container, false );        txtFragHomeNameOpration = view.findViewById( R.id.txtFragHomeNameOpration );        layoutAnimationController = AnimationUtils.loadLayoutAnimation( getActivity(), R.anim.layout_animation_recycler );        scaleAnimation = AnimationUtils.loadAnimation( getActivity(), R.anim.scale_animation );        imgFragHomeProfile = view.findViewById( R.id.imgFragHomeProfile );        btnFragBackToOpartion = view.findViewById( R.id.btnFragBackToOpartion );        btnFragBackToOpartion.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View view) {                ((TestActivity) getActivity()).finshActivity();            }        } );        imgFragHomeEmptyData = view.findViewById( R.id.imgFragHomeEmptyData );        //for Image        imageViewModel = ViewModelProviders.of( this ).get( ImageViewModel.class );        imagess = new ArrayList<>();        ///for EstateType        typeEstateViewModel = ViewModelProviders.of( this ).get( TypeEstateViewModel.class );        shimmerAnimationFragTypeEstate = view.findViewById( R.id.shimmerAnimationFragTypeEstate );        imgFragAddTypeEstate = view.findViewById( R.id.imgFragAddTypeEstate );        recyclerFragHomeTypeEstate = view.findViewById( R.id.recyclerFragHomeTypeEstate );        recyclerFragHomeTypeEstate.setHasFixedSize( true );        layoutManagerTypeEstate = new LinearLayoutManager( getActivity(), RecyclerView.HORIZONTAL, false );        recyclerFragHomeTypeEstate.setLayoutManager( layoutManagerTypeEstate );        typeEstateList = new ArrayList<>();        typeEstateRecyclerAdapter = new TypeEstateRecyclerAdapter( typeEstateList, getActivity(), HomeFragment.this );        recyclerFragHomeTypeEstate.setAdapter( typeEstateRecyclerAdapter );        imgFragAddTypeEstate.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View view) {                TypeEstateBottomSheet typeEstateBottomSheet = new TypeEstateBottomSheet( null );                typeEstateBottomSheet.show( ((TestActivity) getActivity()).getSupportFragmentManager(), "TypeEstateBottomSheet" );            }        } );        ///for Estate        estateViewModel = ViewModelProviders.of( this ).get( EstateViewModel.class );        shimmerAnimationFragEstate = view.findViewById( R.id.shimmerAnimationFragEstate );        recyclerFragHomeEstate = view.findViewById( R.id.recyclerFragHomeEstate );        floatingActionButtonFrag = view.findViewById( R.id.floatingActionButtonFrag );        swipeRefreshFragHomeEstateRecycler = view.findViewById( R.id.swipeRefreshFragHomeEstateRecycler );        recyclerFragHomeEstate.setHasFixedSize( true );        layoutManagerEstate = new LinearLayoutManager( getActivity(), RecyclerView.VERTICAL, false );        recyclerFragHomeEstate.setLayoutManager( layoutManagerEstate );        estateInfos = new ArrayList<>();        estateAll = new ArrayList<>();        estateRcyclerAdapter = new EstateRcyclerAdapter( estateInfos, getActivity() );        recyclerFragHomeEstate.setAdapter( estateRcyclerAdapter );        swipeRefreshFragHomeEstateRecycler.setOnRefreshListener( new SwipeRefreshLayout.OnRefreshListener() {            @Override            public void onRefresh() {                estategetEsateInfo();                estateGetAll();                swipeRefreshFragHomeEstateRecycler.setRefreshing( false );            }        } );        ItemTouchHelper itemTouchHelper = new ItemTouchHelper( simpleCallback );        itemTouchHelper.attachToRecyclerView( recyclerFragHomeEstate );        floatingActionButtonFrag.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View view) {                if (typeEstateList.size() == 0) {                    Toast.makeText( getActivity(), "Add type Estate before", Toast.LENGTH_SHORT ).show();                    return;                }                estateBottomSheet = ((TestActivity) getActivity()).getEstateBottomSheet();                estateBottomSheet = new EstateBottomSheet( null, lastTypeEstate );                estateBottomSheet.show( ((TestActivity) getActivity()).getSupportFragmentManager(), "EstateBottomSeet" );            }        } );        opration = ((TestActivity) getActivity()).getOpration();        txtFragHomeNameOpration.setText( opration );        shimmerAnimationFragEstate.setVisibility( View.VISIBLE );        shimmerAnimationFragEstate.showShimmer( true );        shimmerAnimationFragTypeEstate.setVisibility( View.VISIBLE );        shimmerAnimationFragTypeEstate.showShimmer( true );        getAllTypeEstate();        return view;    }    ///region TypeEstate    public void getAllTypeEstate() {        typeEstateViewModel.getAllTypeEstate().observe( getActivity(), new Observer<List<TypeEstate>>() {            @Override            public void onChanged(List<TypeEstate> typeEstates) {                typeEstateList = typeEstates;                typeEstateRecyclerAdapter.setData( typeEstates );                if (typeEstates.size() != 0) {                    setTypeEstateID( typeEstates.get( 0 ).getId() );                }                if (typeEstates.size() == 0) {                    imgFragHomeEmptyData.setVisibility( View.VISIBLE );                    shimmerAnimationFragEstate.hideShimmer();                    shimmerAnimationFragEstate.setVisibility( View.GONE );                } else {                    imgFragHomeEmptyData.setVisibility( View.GONE );                }                shimmerAnimationFragTypeEstate.hideShimmer();                shimmerAnimationFragTypeEstate.setVisibility( View.GONE );            }        } );    }    ///endregion    ///region Estate    public void estatedelete(Estate estate) {        estateViewModel.delete( estate );    }    public void estategetEsateInfo() {        estateViewModel.getEsateInfo( opration, lastTypeEstate ).observe( this, new Observer<List<EstateInfo>>() {            @Override            public void onChanged(List<EstateInfo> estateInfos) {                estateInfos = estateInfos;                estateRcyclerAdapter.setDate( estateInfos );                recyclerFragHomeEstate.setLayoutAnimation( layoutAnimationController );                recyclerFragHomeEstate.getAdapter().notifyDataSetChanged();                recyclerFragHomeEstate.scheduleLayoutAnimation();                if (estateInfos.size() == 0) {                    imgFragHomeEmptyData.setVisibility( View.VISIBLE );                } else {                    imgFragHomeEmptyData.setVisibility( View.GONE );                }                shimmerAnimationFragEstate.hideShimmer();                shimmerAnimationFragEstate.setVisibility( View.GONE );            }        } );    }    public void estateGetAll() {        estateViewModel.getAllByEstateTypeID( lastTypeEstate, opration ).observe( getActivity(), new Observer<List<Estate>>() {            @Override            public void onChanged(List<Estate> estates) {                estateAll = estates;            }        } );    }    ///endregion    public void setTypeEstateID(int typeEstateID) {        lastTypeEstate = typeEstateID;        swipeRefreshFragHomeEstateRecycler.setRefreshing( true );        estategetEsateInfo();        estateGetAll();        swipeRefreshFragHomeEstateRecycler.setRefreshing( false );    }    public int getLastTypeEstate() {        return lastTypeEstate;    }    //function for swape left or right to remove or to add fav    ItemTouchHelper.SimpleCallback simpleCallback = new ItemTouchHelper.SimpleCallback( 0,            ItemTouchHelper.RIGHT ) {        @Override        public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {            return false;        }        @Override        public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {            int position = viewHolder.getAdapterPosition();            switch (direction) {                case ItemTouchHelper.RIGHT:                    new AlertDialog.Builder( getActivity() )                            .setTitle( "Delete Item" )                            .setMessage( "Are you sure you want to delete this entry or edite it ?" )                            .setPositiveButton( "Yes", new DialogInterface.OnClickListener() {                                public void onClick(DialogInterface dialog, int which) {                                    Estate estate = estateAll.get( position );                                    estateViewModel.delete( estate );                                    Toast.makeText( getActivity(), estate.getSpace() + "", Toast.LENGTH_SHORT ).show();                                }                            } )                            .setNegativeButton( "No", new DialogInterface.OnClickListener() {                                @Override                                public void onClick(DialogInterface dialogInterface, int j) {                                    swipeRefreshFragHomeEstateRecycler.setRefreshing( true );                                    estategetEsateInfo();                                    estateGetAll();                                    swipeRefreshFragHomeEstateRecycler.setRefreshing( false );                                }                            } )                            .setIcon( android.R.drawable.ic_dialog_alert )                            .show();                    break;            }        }        @Override        public void onChildDraw(@NonNull Canvas c, @NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder,                                float dX, float dY, int actionState, boolean isCurrentlyActive) {            new RecyclerViewSwipeDecorator.Builder( c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive )                    .addSwipeRightBackgroundColor( ContextCompat.getColor( getActivity(), R.color.backgroundDelete ) )                    .addSwipeRightActionIcon( R.drawable.ic_delete )                    .create()                    .decorate();            super.onChildDraw( c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive );        }    };}