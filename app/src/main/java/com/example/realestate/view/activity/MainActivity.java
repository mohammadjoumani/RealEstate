package com.example.realestate.view.activity;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.lifecycle.Observer;import androidx.lifecycle.ViewModelProviders;import com.example.realestate.R;import com.example.realestate.model.entity.Office;import com.example.realestate.view.dialog.OfficeCreateAccountBottonSheet;import com.example.realestate.viewmodel.OfficeViewModel;import com.google.android.material.snackbar.Snackbar;import java.util.ArrayList;import java.util.List;import br.com.simplepass.loadingbutton.customViews.CircularProgressButton;import io.paperdb.Paper;import static com.example.realestate.view.dialog.EstateBottomSheet.REQUEST_PERMISSION_EXTERNAL;public class MainActivity extends AppCompatActivity {    private Animation topAnimation;    private Animation bottomAnimation;    private OfficeViewModel officeViewModel;    private ImageView imgIconApp;    private EditText edtPhoneNumber;    private EditText edtpassword;    private CircularProgressButton btnSingIn;    private TextView txtCreateAccount;    private String numberFromDialog;    private  OfficeCreateAccountBottonSheet officeCreateAccountBottonSheet;    private List<Office> offices = new ArrayList<>();    private Office office = new Office();    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate( savedInstanceState );        getWindow().setFlags( WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN );        setContentView( R.layout.activity_main );        if (Paper.book().read( "isTwo", false )) {            startActivity( new Intent( MainActivity.this, OprationActivity.class ) );            finish();        }        officeViewModel = ViewModelProviders.of( this ).get( OfficeViewModel.class );        getAllOffice();        topAnimation = AnimationUtils.loadAnimation( this, R.anim.top_animtion );        bottomAnimation = AnimationUtils.loadAnimation( this, R.anim.bottom_animation );        imgIconApp = findViewById( R.id.imgIconApp );        edtPhoneNumber = findViewById( R.id.edtPhoneNumber );        edtpassword = findViewById( R.id.edtpassword );        btnSingIn = findViewById( R.id.btnSingIn );        txtCreateAccount = findViewById( R.id.txtCreateAcount );        //Animation        imgIconApp.setAnimation( topAnimation );        txtCreateAccount.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View view) {                officeCreateAccountBottonSheet = new OfficeCreateAccountBottonSheet();                officeCreateAccountBottonSheet.show( getSupportFragmentManager(), "OfficeCreateAccountBottonSheet" );            }        } );        btnSingIn.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View view) {                String numberPhone = edtPhoneNumber.getText().toString().trim();                String password = edtpassword.getText().toString().trim();                if (numberPhone.equals( "" )) {                    edtPhoneNumber.setError( "Faild can't be Empty" );                    Toast.makeText( MainActivity.this, "Please Fill all record", Toast.LENGTH_SHORT ).show();                    return;                }                if (password.equals( "" )) {                    edtpassword.setError( "Faild can't be Empty" );                    Toast.makeText( MainActivity.this, "Please Fill all record", Toast.LENGTH_SHORT ).show();                    return;                }                btnSingIn.startAnimation();                getOfficeByNumberPhone( numberPhone );            }        } );    }    // for Office Insert And Update And Delete    public void officeinset(Office office) {        officeViewModel.insert( office );    }    public void officedelete(Office office) {        officeViewModel.delete( office );    }    public void officeupdate(Office office) {        officeViewModel.update( office );    }    public void getAllOffice() {        officeViewModel.getAllOffice().observe( this, new Observer<List<Office>>() {            @Override            public void onChanged(List<Office> offices) {                MainActivity.this.offices = offices;            }        } );    }    private void getOfficeByNumberPhone(String numberPhone) {        officeViewModel.getOfficeByNumberPhone( numberPhone ).observe( this, new Observer<Office>() {            @Override            public void onChanged(Office office) {                MainActivity.this.office = office;                if (office == null) {                    Snackbar snackbar = Snackbar.make( findViewById( R.id.layoutSingIn ), "Number or Password is wrong", Snackbar.LENGTH_LONG );                    snackbar.setAction( "RETRY", new View.OnClickListener() {                        @Override                        public void onClick(View view) {                            edtPhoneNumber.setText( "" );                            edtpassword.setText( "" );                        }                    } );                    snackbar.show();                    return;                }                if (office.getNumberPhone().equals( numberPhone )) {                    Paper.book().write( "office", office );                    Paper.book().write( "isTwo", true );                    startActivity( new Intent( MainActivity.this, OprationActivity.class ) );                    finish();                } else {                    Snackbar snackbar = Snackbar.make( findViewById( R.id.layoutSingIn ), "Number or Password is wrong", Snackbar.LENGTH_LONG );                    snackbar.setAction( "RETRY", new View.OnClickListener() {                        @Override                        public void onClick(View view) {                            edtPhoneNumber.setText( "" );                            edtpassword.setText( "" );                        }                    } );                    snackbar.show();                }            }        } );    }    public void setNumberFromDialogCreateOffice(String number) {        numberFromDialog = number;        edtPhoneNumber.setText( numberFromDialog );        edtpassword.setText( numberFromDialog );        btnSingIn.callOnClick();    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult( requestCode, permissions, grantResults );        officeCreateAccountBottonSheet.onRequestPermissionsResult( requestCode, permissions, grantResults );        if (officeCreateAccountBottonSheet != null) {            switch (requestCode) {                case REQUEST_PERMISSION_EXTERNAL:                    if (officeCreateAccountBottonSheet.checkPermissionsExternal()) {                        officeCreateAccountBottonSheet.openGallery();                    } else {                        Toast.makeText( this, "Permissions denied.", Toast.LENGTH_SHORT ).show();                    }                    break;            }        }    }}