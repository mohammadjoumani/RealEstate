package com.example.realestate.view.activity;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Canvas;import android.net.Uri;import android.os.Bundle;import android.view.View;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.view.animation.LayoutAnimationController;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.core.content.ContextCompat;import androidx.lifecycle.Observer;import androidx.lifecycle.ViewModelProviders;import androidx.recyclerview.widget.ItemTouchHelper;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;import com.example.realestate.R;import com.example.realestate.model.entity.Estate;import com.example.realestate.model.entity.EstateInfo;import com.example.realestate.model.entity.Image;import com.example.realestate.model.entity.Location;import com.example.realestate.model.entity.TypeEstate;import com.example.realestate.view.adapter.EstateRcyclerAdapter;import com.example.realestate.view.adapter.TypeEstateRecyclerAdapter;import com.example.realestate.view.dialog.EstateBottomSheet;import com.example.realestate.viewmodel.EstateViewModel;import com.example.realestate.viewmodel.ImageViewModel;import com.example.realestate.viewmodel.LocationViewModel;import com.example.realestate.viewmodel.TypeEstateViewModel;import com.facebook.shimmer.ShimmerFrameLayout;import com.google.android.material.floatingactionbutton.FloatingActionButton;import java.util.ArrayList;import java.util.List;import io.paperdb.Paper;import it.xabaras.android.recyclerview.swipedecorator.RecyclerViewSwipeDecorator;import static com.example.realestate.view.dialog.EstateBottomSheet.REQUEST_PERMISSION_EXTERNAL;public class HomeActivity extends AppCompatActivity {    private int lastTypeEstate = 1;    private LayoutAnimationController layoutAnimationController;    private Animation scaleAnimation;    private ImageButton btnBackToOpartion;    private ImageView imgHomeProfile;    private TextView txtHomeNameOpration;    private ImageView imgAddTypeEstate;    private RecyclerView recyclerHomeTypeEstate;    private List<TypeEstate> typeEstateList;    private TypeEstateRecyclerAdapter typeEstateRecyclerAdapter;    private RecyclerView.LayoutManager layoutManagerTypeEstate;    private TypeEstateViewModel typeEstateViewModel;    private ShimmerFrameLayout shimmerAnimationTypeEstate;    private FloatingActionButton floatingActionButton;    private RecyclerView recyclerHomeEstate;    private List<EstateInfo> estateInfos;    private List<Estate> estateAll;    private EstateRcyclerAdapter estateRcyclerAdapter;    private RecyclerView.LayoutManager layoutManagerEstate;    private EstateViewModel estateViewModel;    private ShimmerFrameLayout shimmerAnimationEstate;    private SwipeRefreshLayout swipeRefreshHomeEstateRecycler;    private LocationViewModel locationViewModel;    private List<Location> locations;    private ImageView imgHomeEmptyData;    private String opration;    private ImageViewModel imageViewModel;    private List<Image> imagess;//    private FavouriteViewModel favouriteViewModel;    private int maxEstateID;    private EstateBottomSheet estateBottomSeet;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate( savedInstanceState );        setContentView( R.layout.activity_home );        txtHomeNameOpration = findViewById( R.id.txtHomeNameOpration );        layoutAnimationController = AnimationUtils.loadLayoutAnimation( this, R.anim.layout_animation_recycler );        scaleAnimation = AnimationUtils.loadAnimation( this, R.anim.scale_animation );        imgHomeEmptyData = findViewById( R.id.imgHomeEmptyData );        btnBackToOpartion = findViewById( R.id.btnBackToOpartion );        btnBackToOpartion.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View view) {                finish();            }        } );        imgHomeProfile = findViewById( R.id.imgHomeProfile );        imgHomeProfile.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View view) {            }        } );        //for Favourite Estate//        favouriteViewModel = ViewModelProviders.of( this ).get( FavouriteViewModel.class );        //for Image        imageViewModel = ViewModelProviders.of( this ).get( ImageViewModel.class );        imagess = new ArrayList<>();        ///for EstateType//        typeEstateViewModel = ViewModelProviders.of( this ).get( TypeEstateViewModel.class );//        shimmerAnimationTypeEstate = findViewById( R.id.shimmerAnimationTypeEstate );//        imgAddTypeEstate = findViewById( R.id.imgAddTypeEstate );//        recyclerHomeTypeEstate = findViewById( R.id.recyclerHomeTypeEstate );//        recyclerHomeTypeEstate.setHasFixedSize( true );//        layoutManagerTypeEstate = new LinearLayoutManager( this, RecyclerView.HORIZONTAL, false );//        recyclerHomeTypeEstate.setLayoutManager( layoutManagerTypeEstate );//        typeEstateList = new ArrayList<>();//        typeEstateRecyclerAdapter = new TypeEstateRecyclerAdapter( typeEstateList, HomeActivity.this );//        recyclerHomeTypeEstate.setAdapter( typeEstateRecyclerAdapter );////        imgAddTypeEstate.setOnClickListener( new View.OnClickListener() {//            @SuppressLint("WrongConstant")//            @Override//            public void onClick(View view) {////                TypeEstateBottomSheet typeEstateBottomSheet = new TypeEstateBottomSheet();//                typeEstateBottomSheet.show( getSupportFragmentManager(), "TypeEstateBottomSheet" );//            }//        } );        ///for Estate        estateViewModel = ViewModelProviders.of( this ).get( EstateViewModel.class );        shimmerAnimationEstate = findViewById( R.id.shimmerAnimationEstate );        recyclerHomeEstate = findViewById( R.id.recyclerHomeEstate );        floatingActionButton = findViewById( R.id.floatingActionButton );        swipeRefreshHomeEstateRecycler = findViewById( R.id.swipeRefreshHomeEstateRecycler );        recyclerHomeEstate.setHasFixedSize( true );        layoutManagerEstate = new LinearLayoutManager( this, RecyclerView.VERTICAL, false );        recyclerHomeEstate.setLayoutManager( layoutManagerEstate );        estateInfos = new ArrayList<>();        estateAll = new ArrayList<>();        estateRcyclerAdapter = new EstateRcyclerAdapter( estateInfos, HomeActivity.this );        recyclerHomeEstate.setAdapter( estateRcyclerAdapter );        swipeRefreshHomeEstateRecycler.setOnRefreshListener( new SwipeRefreshLayout.OnRefreshListener() {            @Override            public void onRefresh() {                estategetEsateInfo();                estateGetAll();                swipeRefreshHomeEstateRecycler.setRefreshing( false );            }        } );        ItemTouchHelper itemTouchHelper = new ItemTouchHelper( simpleCallback );        itemTouchHelper.attachToRecyclerView( recyclerHomeEstate );        Intent intent = getIntent();        opration = intent.getStringExtra( "cardType" );        txtHomeNameOpration.setText( opration );        floatingActionButton.setOnClickListener( new View.OnClickListener() {            @SuppressLint("WrongConstant")            @Override            public void onClick(View view) {                if (typeEstateList.size() == 0) {                    Toast.makeText( HomeActivity.this, "Add type Estate before", Toast.LENGTH_SHORT ).show();                    return;                }//                estateBottomSeet = new EstateBottomSheet();//                estateBottomSeet.show( getSupportFragmentManager(), "EstateBottomSeet" );            }        } );        shimmerAnimationEstate.setVisibility( View.VISIBLE );        shimmerAnimationEstate.showShimmer( true );        shimmerAnimationTypeEstate.setVisibility( View.VISIBLE );        shimmerAnimationTypeEstate.showShimmer( true );        getAllTypeEstate();        //for Locarion        locationViewModel = ViewModelProviders.of( this ).get( LocationViewModel.class );        locations = new ArrayList<>();        if (Paper.book().read( "isOne", true )) {            insertLocation( new Location( 0, "Halab Aljadeda" ) );            insertLocation( new Location( 0, "Alfouqan" ) );            insertLocation( new Location( 0, "Alzhraa" ) );            insertLocation( new Location( 0, "ALmerdan" ) );            insertLocation( new Location( 0, "Boustan Alzhra" ) );            Paper.book().write( "isOne", false );        }        getAllLocation();    }    ///region TypeEstate    public void typeEstateinset(TypeEstate typeEstate) {        typeEstateViewModel.insert( typeEstate );    }    public void typeEstatedelete(TypeEstate typeEstate) {        typeEstateViewModel.delete( typeEstate );    }    public void typeEstateupdate(TypeEstate typeEstate) {        typeEstateViewModel.update( typeEstate );    }    public void getAllTypeEstate() {        typeEstateViewModel.getAllTypeEstate().observe( this, new Observer<List<TypeEstate>>() {            @Override            public void onChanged(List<TypeEstate> typeEstates) {                HomeActivity.this.typeEstateList = typeEstates;                typeEstateRecyclerAdapter.setData( typeEstates );                if (typeEstates.size() != 0) {                    setTypeEstateID( typeEstates.get( 0 ).getId() );                }                if (typeEstates.size() == 0) {                    imgHomeEmptyData.setVisibility( View.VISIBLE );                    shimmerAnimationEstate.hideShimmer();                    shimmerAnimationEstate.setVisibility( View.GONE );                } else {                    imgHomeEmptyData.setVisibility( View.GONE );                }                shimmerAnimationTypeEstate.hideShimmer();                shimmerAnimationTypeEstate.setVisibility( View.GONE );            }        } );    }    ///endregion    ///region Estate    public void estateinsert(Estate estate) {        estateViewModel.insert( estate );    }    public void estatedelete(Estate estate) {        estateViewModel.delete( estate );    }    public void deleteByID(int ID) {        estateViewModel.deleteByID( ID );    }    public void getEstateID(List<Uri> images) {        estateViewModel.getEstateID().observe( this, new Observer<Integer>() {            @Override            public void onChanged(Integer integer) {                HomeActivity.this.maxEstateID = integer;//                for (int i = 0; i < images.size(); i++) {////                    imageViewModel.insert( new Image( 0, images.get( i ).toString(), integer ) );//                }            }        } );    }    public void estateupdate(Estate estate) {        estateViewModel.update( estate );    }    public void estategetEsateInfo() {        estateViewModel.getEsateInfo( opration, lastTypeEstate ).observe( this, new Observer<List<EstateInfo>>() {            @Override            public void onChanged(List<EstateInfo> estateInfos) {                HomeActivity.this.estateInfos = estateInfos;                estateRcyclerAdapter.setDate( estateInfos );                recyclerHomeEstate.setLayoutAnimation( layoutAnimationController );                recyclerHomeEstate.getAdapter().notifyDataSetChanged();                recyclerHomeEstate.scheduleLayoutAnimation();                if (estateInfos.size() == 0) {                    imgHomeEmptyData.setVisibility( View.VISIBLE );                } else {                    imgHomeEmptyData.setVisibility( View.GONE );                }                shimmerAnimationEstate.hideShimmer();                shimmerAnimationEstate.setVisibility( View.GONE );            }        } );    }    public void estateGetAll() {        estateViewModel.getAllByEstateTypeID( lastTypeEstate, opration ).observe( HomeActivity.this, new Observer<List<Estate>>() {            @Override            public void onChanged(List<Estate> estates) {                HomeActivity.this.estateAll = estates;            }        } );    }    ///endregion    ///region Location    public void insertLocation(Location location) {        locationViewModel.insert( location );    }    public void deleteLocation(Location location) {        locationViewModel.delete( location );    }    public void updateLocation(Location location) {        locationViewModel.update( location );    }    public void getAllLocation() {        locationViewModel.getAllLocation().observe( this, new Observer<List<Location>>() {            @Override            public void onChanged(List<Location> locations) {                HomeActivity.this.locations = locations;            }        } );    }    ///endregion    ///region Image    public void insertImage(Image image) {//        imageViewModel.insert( image );    }    public void deleteImage(Image image) {        imageViewModel.delete( image );    }    public void update(Image image) {        imageViewModel.update( image );    }    public void getImageByEstateID(int estateID) {        imageViewModel.getByEstateID( estateID ).observe( this, new Observer<List<Image>>() {            @Override            public void onChanged(List<Image> images) {                HomeActivity.this.imagess = images;            }        } );    }    ///endregion    //function for swape left or right to remove or to add fav    ItemTouchHelper.SimpleCallback simpleCallback = new ItemTouchHelper.SimpleCallback( 0,            ItemTouchHelper.RIGHT ) {        @Override        public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {            return false;        }        @Override        public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {            int position = viewHolder.getAdapterPosition();            switch (direction) {                case ItemTouchHelper.RIGHT:                    new AlertDialog.Builder( HomeActivity.this )                            .setTitle( "Delete Item" )                            .setMessage( "Are you sure you want to delete this entry or edite it ?" )                            .setPositiveButton( "Yes", new DialogInterface.OnClickListener() {                                public void onClick(DialogInterface dialog, int which) {                                    Estate estate = estateAll.get( position );                                    estateViewModel.delete( estate );                                    Toast.makeText( HomeActivity.this, estate.getSpace() + "", Toast.LENGTH_SHORT ).show();                                }                            } )                            .setNegativeButton( "No", new DialogInterface.OnClickListener() {                                @Override                                public void onClick(DialogInterface dialogInterface, int j) {                                    swipeRefreshHomeEstateRecycler.setRefreshing( true );                                    estategetEsateInfo();                                    estateGetAll();                                    swipeRefreshHomeEstateRecycler.setRefreshing( false );                                }                            } )                            .setIcon( android.R.drawable.ic_dialog_alert )                            .show();                    break;            }        }        @Override        public void onChildDraw(@NonNull Canvas c, @NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder,                                float dX, float dY, int actionState, boolean isCurrentlyActive) {            new RecyclerViewSwipeDecorator.Builder( c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive )                    .addSwipeRightBackgroundColor( ContextCompat.getColor( HomeActivity.this, R.color.backgroundDelete ) )                    .addSwipeRightActionIcon( R.drawable.ic_delete )                    .create()                    .decorate();            super.onChildDraw( c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive );        }    };    public List<Location> getLocations() {        return locations;    }    public String getOpration() {        return opration;    }    public void setTypeEstateID(int typeEstateID) {        lastTypeEstate = typeEstateID;        swipeRefreshHomeEstateRecycler.setRefreshing( true );        estategetEsateInfo();        estateGetAll();        swipeRefreshHomeEstateRecycler.setRefreshing( false );    }    public int getLastTypeEstate() {        return lastTypeEstate;    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult( requestCode, permissions, grantResults );        estateBottomSeet.onRequestPermissionsResult( requestCode, permissions, grantResults );        if (estateBottomSeet != null) {            switch (requestCode) {                case REQUEST_PERMISSION_EXTERNAL:                    if (estateBottomSeet.checkPermissionsExternal()) {                        estateBottomSeet.openGallery();                    } else {                        Toast.makeText( this, "Permissions denied.", Toast.LENGTH_SHORT ).show();                    }                    break;            }        }    }}