package com.example.realestate.view.activity;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import androidx.appcompat.app.AppCompatActivity;import androidx.lifecycle.Observer;import androidx.lifecycle.ViewModelProviders;import androidx.navigation.NavController;import androidx.navigation.Navigation;import androidx.navigation.ui.AppBarConfiguration;import androidx.navigation.ui.NavigationUI;import com.example.realestate.R;import com.example.realestate.model.entity.Estate;import com.example.realestate.model.entity.Location;import com.example.realestate.model.entity.TypeEstate;import com.example.realestate.view.dialog.EstateBottomSheet;import com.example.realestate.viewmodel.EstateViewModel;import com.example.realestate.viewmodel.ImageViewModel;import com.example.realestate.viewmodel.LocationViewModel;import com.example.realestate.viewmodel.TypeEstateViewModel;import com.google.android.material.bottomnavigation.BottomNavigationView;import java.util.ArrayList;import java.util.List;import io.paperdb.Paper;public class HomeActivity extends AppCompatActivity {    private LocationViewModel locationViewModel;    private TypeEstateViewModel typeEstateViewModel;    private EstateViewModel estateViewModel;    private ImageViewModel imageViewModel;    private List<Location> locations;    private EstateBottomSheet estateBottomSheet;    private int maxEstateID;    private Estate currentEstate;    private List<Estate>estateAll;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate( savedInstanceState );        setContentView( R.layout.activity_test );        BottomNavigationView navView = findViewById( R.id.nav_view );        AppBarConfiguration appBarConfiguration = new AppBarConfiguration.Builder(                R.id.navigation_home, R.id.navigation_explor, R.id.navigation_profile )                .build();        NavController navController = Navigation.findNavController( this, R.id.nav_host_fragment );        //NavigationUI.setupActionBarWithNavController( this, navController, appBarConfiguration );        NavigationUI.setupWithNavController( navView, navController );        //for Locarion        locationViewModel = ViewModelProviders.of( this ).get( LocationViewModel.class );        locations = new ArrayList<>();        typeEstateViewModel = ViewModelProviders.of( this ).get( TypeEstateViewModel.class );        estateViewModel = ViewModelProviders.of( this ).get( EstateViewModel.class );        estateAll=new ArrayList<>();        imageViewModel = ViewModelProviders.of( this ).get( ImageViewModel.class );        if (Paper.book().read( "isOne", true )) {            insertLocation( new Location( 0, "Halab Aljadeda" ) );            insertLocation( new Location( 0, "Alfouqan" ) );            insertLocation( new Location( 0, "Alzhraa" ) );            insertLocation( new Location( 0, "ALmerdan" ) );            insertLocation( new Location( 0, "Boustan Alzhra" ) );            Paper.book().write( "isOne", false );        }        getAllLocation();    }    ///region Location    public void insertLocation(Location location) {        locationViewModel.insert( location );    }    public void deleteLocation(Location location) {        locationViewModel.delete( location );    }    public void updateLocation(Location location) {        locationViewModel.update( location );    }    public void getAllLocation() {        locationViewModel.getAllLocation().observe( this, new Observer<List<Location>>() {            @Override            public void onChanged(List<Location> locations) {                HomeActivity.this.locations = locations;            }        } );    }    ///endregion    ///region TypeEstate    public void typeEstateupdate(TypeEstate typeEstate) {        typeEstateViewModel.update( typeEstate );    }    public void typeEstatedelete(TypeEstate typeEstate) {        typeEstateViewModel.delete( typeEstate );    }    public void typeEstateinset(TypeEstate typeEstate) {        typeEstateViewModel.insert( typeEstate );    }    ///endregion    ///region Estate    public void estateinsert(Estate estate) {        estateViewModel.insert( estate );    }    public void estateupdate(Estate estate) {        estateViewModel.update( estate );    }    public void deleteByID(int ID) {        estateViewModel.deleteByID( ID );    }    public void getEstateByID(int ID){        estateViewModel.getEstateByID(ID).observe( this, new Observer<Estate>() {            @Override            public void onChanged(Estate estate) {                currentEstate =estate;                setCurrentEstate(estate);            }        } );    }    public void getEstateID(List<Uri> images) {        estateViewModel.getEstateID().observe( this, new Observer<Integer>() {            @Override            public void onChanged(Integer integer) {                maxEstateID = integer;////                List<Image>images1=new ArrayList<>();////                for (int i=0;i<images.size();i++){////                    images1.add( 0,new Image(0,"mohammad" ,0));//                    Log.d( "sizeImages1",images.get(i).toString()+"" );//                    Log.d( "sizeImages2",images1.get(i).getValue()+"" );//                }                //imageViewModel.insert( images1 );//                for (int i = 0; i < images.size(); i++) {////                    imageViewModel.insert( new Image( 0, images.get( i ).toString(), integer ));//                }            }        } );    }    ///endregion    public String getOpration() {        Intent intent = getIntent();        String opration = intent.getStringExtra( "cardType" );        return opration;    }    public List<Location> getLocations() {        return locations;    }    public EstateBottomSheet getEstateBottomSheet() {        return estateBottomSheet;    }    public void finshActivity() {        this.finish();    }    public void setCurrentEstate(Estate estate){        this.currentEstate=estate;    }    public Estate getCurrentEstate(){        return currentEstate;    }}