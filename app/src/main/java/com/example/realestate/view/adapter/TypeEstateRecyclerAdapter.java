package com.example.realestate.view.adapter;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.graphics.Color;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.animation.AnimationUtils;import android.widget.PopupMenu;import androidx.annotation.NonNull;import androidx.recyclerview.widget.RecyclerView;import com.example.realestate.R;import com.example.realestate.model.entity.TypeEstate;import com.example.realestate.view.activity.TestActivity;import com.example.realestate.view.adapter.viewholder.TypeEstateViewHolder;import com.example.realestate.view.dialog.TypeEstateBottomSheet;import com.example.realestate.view.fragment.HomeFragment;import java.util.List;public class TypeEstateRecyclerAdapter extends RecyclerView.Adapter<TypeEstateViewHolder> {    private List<TypeEstate> typeEstates;    private Context context;    private HomeFragment homeFragment;    private int selectItem = 0;    public TypeEstateRecyclerAdapter(List<TypeEstate> typeEstates, Context context, HomeFragment homeFragment) {        this.typeEstates = typeEstates;        this.context = context;        this.homeFragment = homeFragment;    }    @NonNull    @Override    public TypeEstateViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View view = LayoutInflater.from( context ).inflate( R.layout.item_recycler_type_estate, parent, false );        return new TypeEstateViewHolder( view );    }    @Override    public void onBindViewHolder(@NonNull TypeEstateViewHolder holder, int position) {        holder.getTxtRecyclerTypeEstateName().setText( typeEstates.get( position ).getName() );        holder.getView().setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View view) {                //((TestActivity) context).setLastTypeEstate( typeEstates.get( position ).getId() );                homeFragment.setTypeEstateID( typeEstates.get( position ).getId() );                selectItem = position;                notifyDataSetChanged();            }        } );        if (position == selectItem) {            holder.getTxtRecyclerTypeEstateName().setTextColor( Color.WHITE );            holder.getRelativeRecyclerTypeEstateBckGroudn().setAnimation( AnimationUtils.loadAnimation( context, R.anim.bubble_animation ) );            holder.getRelativeRecyclerTypeEstateBckGroudn().setBackgroundColor( Color.parseColor( "#2B62A8" ) );        } else {            holder.getTxtRecyclerTypeEstateName().setTextColor( Color.parseColor( "#383132" ) );            holder.getRelativeRecyclerTypeEstateBckGroudn().setBackgroundColor( Color.WHITE );        }        holder.getView().setOnLongClickListener( new View.OnLongClickListener() {            @Override            public boolean onLongClick(View view) {                PopupMenu popupMenu = new PopupMenu( context, holder.getView() );                popupMenu.inflate( R.menu.option_menu_type );                popupMenu.setOnMenuItemClickListener( new PopupMenu.OnMenuItemClickListener() {                    @Override                    public boolean onMenuItemClick(MenuItem menuItem) {                        switch (menuItem.getItemId()) {                            case R.id.deleteItem:                                new AlertDialog.Builder( context )                                        .setTitle( "Delete Item" )                                        .setMessage( "Are you sure you want to delete this entry ?" )                                        .setPositiveButton( "Yes", new DialogInterface.OnClickListener() {                                            public void onClick(DialogInterface dialog, int which) {                                                ((TestActivity) context).typeEstatedelete( typeEstates.get( holder.getAdapterPosition() ) );                                            }                                        } )                                        .setNegativeButton( "No", new DialogInterface.OnClickListener() {                                            @Override                                            public void onClick(DialogInterface dialogInterface, int j) {                                            }                                        } )                                        .setIcon( android.R.drawable.ic_dialog_alert )                                        .show();                                break;                            case R.id.updateItem:                                TypeEstateBottomSheet typeEstateBottomSheet = new TypeEstateBottomSheet(typeEstates.get( holder.getAdapterPosition() ));                                typeEstateBottomSheet.show( ((TestActivity) context).getSupportFragmentManager(), "TypeEstateBottomSheet" );                                break;                        }                        return false;                    }                } );                popupMenu.show();                return true;            }        } );    }    @Override    public int getItemCount() {        return typeEstates.size();    }    public void setData(List<TypeEstate> typeEstates) {        this.typeEstates = typeEstates;        notifyDataSetChanged();    }}