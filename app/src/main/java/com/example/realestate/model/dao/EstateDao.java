package com.example.realestate.model.dao;import androidx.lifecycle.LiveData;import androidx.room.Dao;import androidx.room.Delete;import androidx.room.Insert;import androidx.room.Query;import androidx.room.Update;import com.example.realestate.model.entity.Estate;import com.example.realestate.model.entity.EstateInfo;import java.util.List;@Daopublic interface EstateDao {    @Insert    void insert(Estate estate);    @Delete    void delete(Estate estate);    @Update    void update(Estate estate);    @Query( "Select * from Estate Where ID=:id" )    LiveData<Estate>getEstateByID(int id);    @Query("select * from Estate Where TypeEstateID=:TypeEstateID And OprationName=:OprationName")    LiveData<List<Estate>> getAllByEstateTypeID(int TypeEstateID, String OprationName);    @Query("Delete From Estate Where ID=:ID")    void deleteByID(int ID);    //for show price and name office and location for opration and estateType    @Query("SELECT Estate.ID , Estate.image as image, Estate.price as price ,Estate.space as space ," +            "Location.Name as location,Office.Name as office ,Office.NumberPhone as number\n" +            "FROM Estate , Location , Office\n" +            "WHERE Estate.locationID=Location.ID AND Estate.OfficeID=Office.ID\n" +            "AND Estate.TypeEstateID=:typeEstateID AND\n" +            "Estate.OprationName=:oprationName")    LiveData<List<EstateInfo>> getEsateInfo(String oprationName, int typeEstateID);    //for show my estate and explorer it    @Query("SELECT Estate.ID , Estate.image as image ,Estate.price as price,Estate.space as space,Office.name " +            "as office ,Office.NumberPhone as number, Location.name as location " +            "FROM Estate LEFT OUTER JOIN Office \n" +            "on Estate.officeID=Office.ID\n" +            "LEFT OUTER JOIN Location\n" +            "on Estate.locationID=Location.ID\n" +            "WHERE  Estate.OfficeID=:officeID")    LiveData<List<EstateInfo>> getMyEstate(int officeID);    @Query("Select Max(ID) From Estate")    int getMaxID();}